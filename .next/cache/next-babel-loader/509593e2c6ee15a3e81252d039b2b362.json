{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* components/MapContainer.js */\nimport axios from 'axios';\nimport React, { Fragment, Component } from 'react';\nimport { withGoogleMap, withScriptjs, GoogleMap } from 'react-google-maps';\nimport UserMarker from './UserMarker';\nimport PersonMarker from './PersonMarker';\n\nclass MapContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"analyzeRegion\", (position, radius) => people => {\n      const {\n        onRegionFiltered = f => f\n      } = this.props;\n      const withinRegion = this.withinRegion(position, radius);\n      const mappedPeople = people.map(person => {\n        const {\n          position\n        } = person || {};\n        const within = withinRegion(position);\n        return _objectSpread({}, person, {\n          within\n        });\n      });\n      onRegionFiltered(mappedPeople);\n    });\n\n    _defineProperty(this, \"withinRegion\", (position, radius) => {\n      const to = new google.maps.LatLng(position.lat, position.lng);\n      const distance = google.maps.geometry.spherical.computeDistanceBetween;\n      return point => {\n        const from = new google.maps.LatLng(point.lat, point.lng);\n        return distance(from, to) <= radius;\n      };\n    });\n  }\n\n  componentDidMount() {\n    const {\n      person: {\n        id,\n        position\n      },\n      radius,\n      people = [],\n      channel = null\n    } = this.props;\n    const mapContext = this.map.context['__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED'];\n    const setMapCenter = mapContext.setCenter.bind(mapContext);\n    let {\n      lat,\n      lng\n    } = position;\n    channel && channel.bind('transit', ({\n      person = {},\n      people\n    }) => {\n      const {\n        id: $id,\n        position: $position\n      } = person;\n      const isUser = id === $id;\n      const center = isUser ? $position : position;\n      isUser && setMapCenter(center);\n      this.analyzeRegion(center, radius)(people);\n    });\n    this.positionUpdate = setInterval(() => {\n      lat = lat + Math.random() * 0.001;\n      lng = lng + Math.random() * 0.001;\n      axios.post(`/transit/${id}`, {\n        lat,\n        lng\n      });\n    }, 10000);\n    this.analyzeRegion(position, radius)(people);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.positionUpdate);\n  }\n\n  render() {\n    const {\n      person: {\n        id,\n        position\n      },\n      radius,\n      people,\n      channel\n    } = this.props;\n    return __jsx(GoogleMap, {\n      ref: elem => this.map = elem,\n      zoom: 15,\n      center: position\n    }, __jsx(Fragment, null, people.map((person, index) => {\n      const props = {\n        key: index,\n        radius,\n        person,\n        channel\n      };\n\n      const withinRegion = point => (position, radius) => this.withinRegion(position, radius)(point);\n\n      return person.id === id ? __jsx(UserMarker, props) : __jsx(PersonMarker, _extends({\n        user: this.props.person,\n        withinRegion: withinRegion\n      }, props));\n    })));\n  }\n\n}\n\n;\nexport default withScriptjs(withGoogleMap(MapContainer));","map":{"version":3,"sources":["/home/ubuntu/environment/cikoo-geof/components/MapContainer.js"],"names":["axios","React","Fragment","Component","withGoogleMap","withScriptjs","GoogleMap","UserMarker","PersonMarker","MapContainer","position","radius","people","onRegionFiltered","f","props","withinRegion","mappedPeople","map","person","within","to","google","maps","LatLng","lat","lng","distance","geometry","spherical","computeDistanceBetween","point","from","componentDidMount","id","channel","mapContext","context","setMapCenter","setCenter","bind","$id","$position","isUser","center","analyzeRegion","positionUpdate","setInterval","Math","random","post","componentWillUnmount","clearInterval","render","elem","index","key"],"mappings":"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","sourcesContent":[" /* components/MapContainer.js */\n\n    import axios from 'axios';\n    import React, { Fragment, Component } from 'react';\n    import { withGoogleMap, withScriptjs, GoogleMap } from 'react-google-maps';\n\n    import UserMarker from './UserMarker';\n    import PersonMarker from './PersonMarker';\n\n    class MapContainer extends Component {\n        \n     /*global google*/\n     \n     analyzeRegion = (position, radius) => people => {\n        const { onRegionFiltered = f => f } = this.props;\n        const withinRegion = this.withinRegion(position, radius);\n\n        const mappedPeople = people.map(person => {\n          const { position } = person || {};\n          const within = withinRegion(position);\n          return { ...person, within };\n        });\n\n        onRegionFiltered(mappedPeople);\n      }\n\n      componentDidMount() {\n\n        const { person: { id, position }, radius, people = [], channel = null } = this.props;\n        const mapContext = this.map.context['__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED'];\n        const setMapCenter = mapContext.setCenter.bind(mapContext);\n\n        let { lat, lng } = position;\n\n        channel && channel.bind('transit', ({ person = {}, people }) => {\n          const { id: $id, position: $position } = person;\n          const isUser = id === $id;\n          const center = isUser ? $position : position;\n\n          isUser && setMapCenter(center);\n          this.analyzeRegion(center, radius)(people);\n        });\n\n        this.positionUpdate = setInterval(() => {\n          lat = lat + Math.random() * 0.001;\n          lng = lng + Math.random() * 0.001;\n\n          axios.post(`/transit/${id}`, { lat, lng });\n        }, 10000);\n\n        this.analyzeRegion(position, radius)(people);\n\n      }\n\n      componentWillUnmount() {\n        clearInterval(this.positionUpdate);\n      }\n\n\n      withinRegion = (position, radius) => {\n        const to = new google.maps.LatLng(position.lat, position.lng);\n        const distance = google.maps.geometry.spherical.computeDistanceBetween;\n        return point => {\n          const from = new google.maps.LatLng(point.lat, point.lng);\n          return distance(from, to) <= radius;\n        }\n      }\n\n      render() {\n        const { person: { id, position }, radius, people, channel } = this.props;\n\n        return (\n          <GoogleMap ref={elem => this.map = elem} zoom={15} center={position}>\n            <Fragment>\n              { people.map((person, index) => {\n\n                const props = { key: index, radius, person, channel };\n                const withinRegion = point => (position, radius) => this.withinRegion(position, radius)(point);\n\n                return (person.id === id)\n                  ? <UserMarker {...props} />\n                  : <PersonMarker user={this.props.person} withinRegion={withinRegion} {...props} />\n\n              }) }\n            </Fragment>\n          </GoogleMap>\n        );\n      }\n\n    };\n\n    export default withScriptjs(withGoogleMap(MapContainer));"]},"metadata":{},"sourceType":"module"}