{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/* components/MapContainer.js */\nimport axios from 'axios';\nimport React, { Fragment, Component } from 'react';\nimport { withGoogleMap, withScriptjs, GoogleMap } from 'react-google-maps';\nimport UserMarker from './UserMarker';\nimport PersonMarker from './PersonMarker';\n\nvar MapContainer = /*#__PURE__*/function (_Component) {\n  _inherits(MapContainer, _Component);\n\n  var _super = _createSuper(MapContainer);\n\n  function MapContainer() {\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"analyzeRegion\", function (position, radius) {\n      return function (people) {\n        var _this$props$onRegionF = _this.props.onRegionFiltered,\n            onRegionFiltered = _this$props$onRegionF === void 0 ? function (f) {\n          return f;\n        } : _this$props$onRegionF;\n\n        var withinRegion = _this.withinRegion(position, radius);\n\n        var mappedPeople = people.map(function (person) {\n          var _ref = person || {},\n              position = _ref.position;\n\n          var within = withinRegion(position);\n          return _objectSpread({}, person, {\n            within: within\n          });\n        });\n        onRegionFiltered(mappedPeople);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"withinRegion\", function (position, radius) {\n      var to = new google.maps.LatLng(position.lat, position.lng);\n      var distance = google.maps.geometry.spherical.computeDistanceBetween;\n      return function (point) {\n        var from = new google.maps.LatLng(point.lat, point.lng);\n        return distance(from, to) <= radius;\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          _this$props$person = _this$props.person,\n          id = _this$props$person.id,\n          position = _this$props$person.position,\n          radius = _this$props.radius,\n          _this$props$people = _this$props.people,\n          people = _this$props$people === void 0 ? [] : _this$props$people,\n          _this$props$channel = _this$props.channel,\n          channel = _this$props$channel === void 0 ? null : _this$props$channel,\n          _this$props$me = _this$props.me,\n          me = _this$props$me === void 0 ? {\n        me: me\n      } : _this$props$me;\n      var mapContext = this.map.context['__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED'];\n      var setMapCenter = mapContext.setCenter.bind(mapContext);\n      console.log(\"Me\" + me);\n      var lat = position.lat,\n          lng = position.lng;\n      channel && channel.bind('transit', function (_ref2) {\n        var _ref2$person = _ref2.person,\n            person = _ref2$person === void 0 ? {} : _ref2$person,\n            people = _ref2.people;\n        var $id = person.id,\n            $position = person.position;\n        var isUser = id === $id;\n        var center = isUser ? $position : position;\n        isUser && setMapCenter(center);\n\n        _this2.analyzeRegion(center, radius)(people);\n      });\n      this.positionUpdate = setInterval(function () {\n        lat = lat + Math.random() * 0.001;\n        lng = lng + Math.random() * 0.001;\n        axios.post(\"/transit/\".concat(id), {\n          lat: lat,\n          lng: lng\n        });\n      }, 10000);\n      this.analyzeRegion(position, radius)(people);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.positionUpdate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          _this$props2$person = _this$props2.person,\n          id = _this$props2$person.id,\n          position = _this$props2$person.position,\n          radius = _this$props2.radius,\n          people = _this$props2.people,\n          channel = _this$props2.channel;\n      return __jsx(GoogleMap, {\n        ref: function ref(elem) {\n          return _this3.map = elem;\n        },\n        zoom: 14,\n        center: position\n      }, __jsx(Fragment, null, people.map(function (person, index) {\n        var props = {\n          key: index,\n          radius: radius,\n          person: person,\n          channel: channel\n        };\n\n        var withinRegion = function withinRegion(point) {\n          return function (position, radius) {\n            return _this3.withinRegion(position, radius)(point);\n          };\n        };\n\n        return person.id === id ? __jsx(UserMarker, props) : __jsx(PersonMarker, _extends({\n          user: _this3.props.person,\n          withinRegion: withinRegion\n        }, props));\n      })));\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\n\n;\nexport default withScriptjs(withGoogleMap(MapContainer));","map":{"version":3,"sources":["/home/ubuntu/environment/cikoo-geof/components/MapContainer.js"],"names":["axios","React","Fragment","Component","withGoogleMap","withScriptjs","GoogleMap","UserMarker","PersonMarker","MapContainer","position","radius","people","props","onRegionFiltered","f","withinRegion","mappedPeople","map","person","within","to","google","maps","LatLng","lat","lng","distance","geometry","spherical","computeDistanceBetween","point","from","id","channel","me","mapContext","context","setMapCenter","setCenter","bind","console","log","$id","$position","isUser","center","analyzeRegion","positionUpdate","setInterval","Math","random","post","clearInterval","elem","index","key"],"mappings":"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","sourcesContent":[" /* components/MapContainer.js */\n\n    import axios from 'axios';\n    import React, { Fragment, Component } from 'react';\n    import { withGoogleMap, withScriptjs, GoogleMap } from 'react-google-maps';\n\n    import UserMarker from './UserMarker';\n    import PersonMarker from './PersonMarker';\n\n    class MapContainer extends Component {\n        \n     /*global google,myPos*/\n     \n     analyzeRegion = (position, radius) => people => {\n        const { onRegionFiltered = f => f } = this.props;\n        const withinRegion = this.withinRegion(position, radius);\n\n        const mappedPeople = people.map(person => {\n          const { position } = person || {};\n          const within = withinRegion(position);\n          return { ...person, within };\n        });\n\n        onRegionFiltered(mappedPeople);\n      }\n\n      componentDidMount() {\n\n        const { person: { id, position }, radius, people = [], channel = null ,me={ me }} = this.props;\n        const mapContext = this.map.context['__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED'];\n        const setMapCenter = mapContext.setCenter.bind(mapContext);\n        \n        console.log(\"Me\"+me);\n\n        let { lat, lng } = position;\n\n        channel && channel.bind('transit', ({ person = {}, people }) => {\n          const { id: $id, position: $position } = person;\n          const isUser = id === $id;\n          const center = isUser ? $position : position;\n\n          isUser && setMapCenter(center);\n          this.analyzeRegion(center, radius)(people);\n        });\n\n        this.positionUpdate = setInterval(() => {\n          lat = lat + Math.random() * 0.001;\n          lng = lng + Math.random() * 0.001;\n\n          axios.post(`/transit/${id}`, { lat, lng });\n        }, 10000);\n\n        this.analyzeRegion(position, radius)(people);\n\n      }\n\n      componentWillUnmount() {\n        clearInterval(this.positionUpdate);\n      }\n\n\n      withinRegion = (position, radius) => {\n        const to = new google.maps.LatLng(position.lat, position.lng);\n        const distance = google.maps.geometry.spherical.computeDistanceBetween;\n        return point => {\n          const from = new google.maps.LatLng(point.lat, point.lng);\n          return distance(from, to) <= radius;\n        }\n      }\n\n      render() {\n        const { person: { id, position }, radius, people, channel } = this.props;\n\n        return (\n          <GoogleMap ref={elem => this.map = elem} zoom={14} center={position}>\n            <Fragment>\n              { people.map((person, index) => {\n\n                const props = { key: index, radius, person, channel };\n                const withinRegion = point => (position, radius) => this.withinRegion(position, radius)(point);\n\n                return (person.id === id)\n                  ? <UserMarker {...props} />\n                  : <PersonMarker user={this.props.person} withinRegion={withinRegion} {...props} />\n\n              }) }\n            </Fragment>\n          </GoogleMap>\n        );\n      }\n\n    };\n\n    export default withScriptjs(withGoogleMap(MapContainer));"]},"metadata":{},"sourceType":"module"}