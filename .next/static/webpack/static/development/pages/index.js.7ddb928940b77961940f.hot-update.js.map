{"version":3,"file":"static/webpack/static/development/pages/index.js.7ddb928940b77961940f.hot-update.js","sources":["webpack:///./components/MapContainer.js"],"sourcesContent":[" /* components/MapContainer.js */\n\n    import axios from 'axios';\n    import React, { Fragment, Component } from 'react';\n    import { withGoogleMap, withScriptjs, GoogleMap } from 'react-google-maps';\n\n    import UserMarker from './UserMarker';\n    import PersonMarker from './PersonMarker';\n\n    class MapContainer extends Component {\n        \n     /*global google,myPos*/\n     \n     analyzeRegion = (position, radius) => people => {\n        const { onRegionFiltered = f => f } = this.props;\n        const withinRegion = this.withinRegion(position, radius);\n\n        const mappedPeople = people.map(person => {\n          const { position } = person || {};\n          const within = withinRegion(position);\n          return { ...person, within };\n        });\n\n        onRegionFiltered(mappedPeople);\n      }\n\n      componentDidMount() {\n\n        const { person: { id, position }, radius, people = [], channel = null ,me={ me }} = this.props;\n        const mapContext = this.map.context['__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED'];\n        const setMapCenter = mapContext.setCenter.bind(mapContext);\n        \n        console.log(\"Me\"+me);\n\n        let { lat, lng } = position;\n\n        channel && channel.bind('transit', ({ person = {}, people }) => {\n          const { id: $id, position: $position } = person;\n          const isUser = id === $id;\n          const center = isUser ? $position : position;\n\n          isUser && setMapCenter(center);\n          this.analyzeRegion(center, radius)(people);\n        });\n\n        this.positionUpdate = setInterval(() => {\n          lat = lat + Math.random() * 0.001;\n          lng = lng + Math.random() * 0.001;\n\n          axios.post(`/transit/${id}`, { lat, lng });\n        }, 10000);\n\n        this.analyzeRegion(position, radius)(people);\n\n      }\n\n      componentWillUnmount() {\n        clearInterval(this.positionUpdate);\n      }\n\n\n      withinRegion = (position, radius) => {\n        const to = new google.maps.LatLng(position.lat, position.lng);\n        const distance = google.maps.geometry.spherical.computeDistanceBetween;\n        return point => {\n          const from = new google.maps.LatLng(point.lat, point.lng);\n          return distance(from, to) <= radius;\n        }\n      }\n\n      render() {\n        const { person: { id, position }, radius, people, channel } = this.props;\n\n        return (\n          <GoogleMap ref={elem => this.map = elem} zoom={30} center={position}>\n            <Fragment>\n              { people.map((person, index) => {\n\n                const props = { key: index, radius, person, channel };\n                const withinRegion = point => (position, radius) => this.withinRegion(position, radius)(point);\n\n                return (person.id === id)\n                  ? <UserMarker {...props} />\n                  : <PersonMarker user={this.props.person} withinRegion={withinRegion} {...props} />\n\n              }) }\n            </Fragment>\n          </GoogleMap>\n        );\n      }\n\n    };\n\n    export default withScriptjs(withGoogleMap(MapContainer));"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAXA;AACA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AA3CA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AANA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;;AAEA;AACA;AACA;;;AAYA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAIA;;;;AAhFA;AACA;AAiFA;AAEA;;;;A","sourceRoot":""}